@use "./variables" as *;
@use "./functions" as *;
@use "./colors" as *;
@use "sass:map";

//param:default value
@mixin flex($direction, $justify: false) {
  display: flex;
  flex-direction: $direction;
  align-items: center;
  flex-wrap: wrap;
  overflow: hidden;
  @if ($justify != false) {
    justify-content: $justify;
  }
}

@mixin grid($cols, $gap, $responsive: false) {
  position: relative;
  display: grid;
  grid-template-columns: repeat($cols, 1fr);
  grid-template-rows: auto;
  gap: px-to-rem($gap);
  overflow: hidden;
  justify-items: center;
  @if ($responsive == true) {
    @include breakpoint-up(medium) {
      grid-template-columns: repeat($cols + 1, 1fr);
    }

    @include breakpoint-up(large) {
      grid-template-columns: repeat($cols + 2, 1fr);
    }
    @include breakpoint-up(xlarge) {
      grid-template-columns: repeat($cols + 3, 1fr);
      gap: px-to-rem($gap + 10);
    }
  }
}

@mixin grid-unequal($cols, $space, $gap, $responsive: false) {
  position: relative;
  display: grid;
  grid-template-columns: $space;
  grid-template-rows: auto;
  gap: px-to-rem($gap);
  overflow: hidden;
  justify-items: center;
  @if ($responsive == true) {
    @include breakpoint-up(medium) {
      grid-template-columns: repeat($cols + 1, 1fr);
    }

    @include breakpoint-up(large) {
      grid-template-columns: repeat($cols + 2, 1fr);
    }
    @include breakpoint-up(xlarge) {
      grid-template-columns: repeat($cols + 3, 1fr);
      gap: px-to-rem($gap + 10);
    }
  }
}

//positioning
@mixin top-right($top, $right) {
  position: absolute;
  top: px-to-rem($top);
  right: px-to-rem($right);
}
@mixin bottom-center($bottom) {
  position: absolute;
  bottom: px-to-rem($bottom);
  width: 100%;
}
@mixin absolute-position-all($val) {
  position: absolute;
  top: $val;
  left: $val;
  bottom: $val;
  right: $val;
}
@mixin pseudo {
  position: absolute;
  content: "";
  width: 100%;
  height: 100%;
}

//effects
@mixin neumorphism {
  background-color: var(--background-color);
  box-shadow: 13px 13px 22px hsl(204, 16%, 75%), -13px -13px 22px #ffffff;
}
@mixin depression($color) {
  box-shadow: inset 5px 5px 10px darken($color, 5%),
    inset -5px -5px 10px lighten($color, 5%);
}

//claymorphism
@mixin claymorphism {
  box-shadow: 25px 25px 75px rgba(0, 0, 0, 0.25),
    10px 10px 70px rgba(0, 0, 0, 0.25), inset 5px 5px 10px rgba(0, 0, 0, 0.5),
    inset 5px 5px 10px rgba(255, 255, 255, 0.2),
    inset -5px -5px 15px rgba(0, 0, 0, 0.75);
}
@mixin claymorphism2 {
  box-shadow: 5px 5px 7px rgba(0, 0, 0, 0.25),
    inset 2px 2px 5px rgba(255, 255, 255, 0.25),
    inset -3px -3px 5px rgba(0, 0, 0, 0.5);
}
@mixin claymorphism3 {
  box-shadow: 5px 5px 7px rgba(0, 0, 0, 0.25),
    inset 2px 2px 5px rgba(0, 0, 0, 0.35),
    inset -3px -3px 5px rgba(0, 0, 0, 0.5);
}
@mixin glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: $rounded-md;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-right: 1px solid rgba(255, 255, 255, 0.2);
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
}
$breakpoints-up: (
  "medium": px-to-em(700),
  "large": px-to-em(900),
  "xlarge": px-to-em(1440),
) !default;
$breakpoints-down: (
  "small": px-to-em(699.98),
  "medium": px-to-em(899.98),
  "large": px-to-em(1439.98),
) !default;

@mixin breakpoint-up($size) {
  @media only screen and (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media only screen and (max-width: map-get($breakpoints-down, $size)) {
    @content;
  }
}
